//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Opti.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Opti.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this flag is specified, the resulting directory will be opened after the successful optimization.
        /// </summary>
        internal static string description_open {
            get {
                return ResourceManager.GetString("description_open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path of the desired directory to contain the results. Doesn&apos;t have to exist beforehand.
        /// </summary>
        internal static string description_outdir {
            get {
                return ResourceManager.GetString("description_outdir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection of paths being either directories containing the input files or the files themselves. It is expected that you provide .gsa, .txt and .mic files, one of each. Paths provided can be relative. If no paths are provided, current working directory will be used to retrieve the file paths.
        /// </summary>
        internal static string description_paths {
            get {
                return ResourceManager.GetString("description_paths", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this flag is specified, the full result will be printed to the console.
        /// </summary>
        internal static string description_print {
            get {
                return ResourceManager.GetString("description_print", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name for the generated output files.
        /// </summary>
        internal static string description_resultname {
            get {
                return ResourceManager.GetString("description_resultname", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A tool that optimizes the ASM-formatted files; the amount of both operational and conditional vertices.
        /// </summary>
        internal static string description_root {
            get {
                return ResourceManager.GetString("description_root", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this flag is specified, the program will only report whether the input files are in the correct format; no optimization is done nor any output is produced. If this option is specified, all the other are ignored.
        /// </summary>
        internal static string description_verifyonly {
            get {
                return ResourceManager.GetString("description_verifyonly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No valid {0} file provided!.
        /// </summary>
        internal static string err_input_invalid {
            get {
                return ResourceManager.GetString("err_input_invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple {0} files found!.
        /// </summary>
        internal static string err_input_multiple {
            get {
                return ResourceManager.GetString("err_input_multiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outdir parameter not valid!.
        /// </summary>
        internal static string err_outdir_invalid {
            get {
                return ResourceManager.GetString("err_outdir_invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} file:.
        /// </summary>
        internal static string info_file {
            get {
                return ResourceManager.GetString("info_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optimized {0} elements.
        /// </summary>
        internal static string info_optimized {
            get {
                return ResourceManager.GetString("info_optimized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optimization results saved to {0}.
        /// </summary>
        internal static string info_saved {
            get {
                return ResourceManager.GetString("info_saved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found incompatibilities during input analysis!.
        /// </summary>
        internal static string input_err {
            get {
                return ResourceManager.GetString("input_err", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input checked, appears to be fully valid!.
        /// </summary>
        internal static string input_ok {
            get {
                return ResourceManager.GetString("input_ok", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press any button to continue....
        /// </summary>
        internal static string press_to_continue {
            get {
                return ResourceManager.GetString("press_to_continue", resourceCulture);
            }
        }
    }
}
